\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename /Users/chris.clark/Projects/elisp/setenv-file/doc/setenv-file.info
@settitle setenv-file
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@finalout
@titlepage
@title setenv-file
@author Chris Clark
@end titlepage

@ifnottex
@node Top
@top setenv-file

Set or unset environment variables from a file.

This package provides an interactive function @samp{setenv-file} to set environment
variables defined in a file. With one @samp{C-u} prefix argument, @samp{setenv-file}
unsets the environment variables defined in the file.

When used interactively, @samp{setenv-file} prompts for a file, defaulting to the
directory @samp{setenv-file-dir}.
@end ifnottex

@menu
* Usage::
* Usage in org-mode::
* File Format::
@end menu

@node Usage
@chapter Usage

Load @samp{setenv-file.el} in Emacs, and optionally set a @samp{setenv-file-dir}:

@lisp
(load "/path/to/setenv-file.el")
(setq setenv-file-dir (expand-file-name "~/.env/"))
@end lisp

Create a file in @samp{setenv-file-dir} with environment variable definitions. For
example:

@example
FOO=~/foo
BAR=$FOO/bar
ОФИС=ДОМ
@end example

And now you can set those environment variables in Emacs using @samp{M-x
setenv-file}, and navigate to the file. View your new environment variables with
@samp{M-x getenv}.

@node Usage in org-mode
@chapter Usage in org-mode

The example below shows a convenient way to declare and set environment
variables in an @samp{org} document:

@example
#+NAME: env
| Var  | Value    |
|------+----------|
| FOO  | ~/foo    |
| BAR  | $FOO/bar |
| ОФИС | ДОМ      |

#+begin_src emacs-lisp :var env=env
  (setenv-file-export-pairs env)
#+end_src
@end example

@node File Format
@chapter File Format

Each line in the file should be in a @samp{KEY=VALUE} format, with one entry per
line. This package does not invoke a shell to interpret the file, so most
shell-isms will not work. However, the env file may:

@itemize
@item
Use existing environment variables
@item
Define an environment variable and use it in successive lines
@item
A @samp{~} is expanded if it is the first character in the value
@end itemize

@bye